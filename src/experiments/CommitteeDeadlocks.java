package experiments;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.Random;

import experiments.functions.Functions;

import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.meta.Vote;
import weka.classifiers.trees.RandomForest;
import weka.core.Instance;
import weka.core.Instances;

/**
 * Experiment performed to measure how many times a deadlock (split decision by forest of trees) occur 
 * in the first iteration of the execution considering a committee of trees generated by random forest algorithm.
 * @author diego
 *
 */
public class CommitteeDeadlocks {
	static int NUMBER_OF_TREES = 50;
	static final String[] domainList = {"betting","business_partner","magazine_subscription","online_book","purchase_order"};
	static String EXPERIMENTS = "";

	public static void main(String[] args) {
		Locale.setDefault(Locale.ENGLISH);
		Random r = null;
		int DOMAIN_ID = 3;
		String domain;
		PrintWriter pw = null;
		if (args.length > 0){
			EXPERIMENTS = "../";
			System.out.printf("Args:\n> Domain (1-betting/ 2-business/ 3-magazine/ 4-book/ 5-order\n");
			DOMAIN_ID = Integer.valueOf(args[0]) - 1;
		}
		domain = domainList[DOMAIN_ID];
		
		String arffFileName = EXPERIMENTS + "ARFF/MatchingNetwork-" + domain + "-COMA-Matcher.arff";
		String logFileName = EXPERIMENTS + "logs/CommitteeDeadlocks/"+ domain + ".log.txt.test";
		double MIN, MAX;
//		MIN = 0.4; MAX = 0.6;
		MIN = MAX = 0.5;
		BufferedReader reader;
		Instances allInstances,trainingInstances,testInstances;
		allInstances = null;
		try {
			reader = new BufferedReader(new FileReader(new File(arffFileName)));
			allInstances = new Instances(reader);
			reader.close();
		} catch (FileNotFoundException e) {
			System.err.printf("ARFF file not found.\n");
		} catch (IOException e) {
			System.err.printf("Error reading ARFF file.\n");
		}
		try {
			pw = new PrintWriter(new File(logFileName));
		} catch (FileNotFoundException e1) {
			System.err.printf("Error writing log (%s)\n",logFileName);
		}

		allInstances.deleteAttributeAt(1);				//deleting candidate string attribute
		allInstances.setClassIndex(allInstances.numAttributes()-1);
		int POSITIVE = allInstances.classAttribute().indexOfValue("true");
		int NEGATIVE = 1 - POSITIVE;
		
		int[] deadlocksRF, deadlocksVT10, deadlocksVT20, deadlocksVT50;
		int sumDeadLocksRF, sumDeadLocksVT10, sumDeadLocksVT20, sumDeadLocksVT50;
		sumDeadLocksRF = sumDeadLocksVT10 = sumDeadLocksVT20 = sumDeadLocksVT50 = 0;
		
		deadlocksRF = new int[30];
		deadlocksVT10 = new int[30];
		deadlocksVT20 = new int[30];
		deadlocksVT50 = new int[30];
		//int sumDeadlocksRF05 = 0;
		//int[] history0406 = new int[30];
		
		//System.out.printf("Seed\tRandomForest\tTop10\tTop20\tTop50\n");
		pw.printf("Seed\tRandomForest\tTop10\tTop20\tTop50\n");
		for (int randSeed = 0; randSeed < 30; randSeed++){
			r = new Random(randSeed);
			allInstances.randomize(r);
			System.out.printf("Running seed %d\n",randSeed);
			try {
				
				
				RandomForest rf = new RandomForest();
				rf.setNumTrees(NUMBER_OF_TREES);
				int dlRF, dlVT10, dlVT20, dlVT50;
				dlRF = dlVT10 = dlVT20 = dlVT50 = 0;
				//int deadlocksRF05 = 0;
				//int deadlocksRF0406 = 0;
				for (int foldNo=0; foldNo<10; foldNo++){
					Evaluation eval = new Evaluation(allInstances);
					trainingInstances = allInstances.trainCV(10, foldNo);
					testInstances = allInstances.testCV(10, foldNo);
					System.out.printf("building classifier...");
					rf.buildClassifier(trainingInstances);
					System.out.printf("classifier built!\n");
					Classifier[] RFTrees = rf.getClassifiers();
					Vote voters10 = new Vote();
					Vote voters20 = new Vote();
					Vote voters50 = new Vote();
					double[] f1scores = new double[NUMBER_OF_TREES];
					for (int treeID = 0; treeID < NUMBER_OF_TREES; treeID++){
						Evaluation ev = new Evaluation(testInstances);
						ev.evaluateModel(RFTrees[treeID], testInstances);
						//System.out.printf("Precision: %.3f\n",ev.precision(POSITIVE));
						//System.out.printf("Recall: %.3f\n",ev.recall(POSITIVE));
						//System.out.printf("[%d] F-Measure: %.3f\n",treeID,ev.fMeasure(POSITIVE));
						f1scores[treeID] = ev.fMeasure(POSITIVE);
					}
					
					
					int[] ranked = null;
					ranked = Functions.rankingScores(f1scores, 50);
					Classifier[] trees50 = new Classifier[50];
					Classifier[] trees20 = new Classifier[20];
					Classifier[] trees10 = new Classifier[10];
					int rankNo;
					for (rankNo = 0; rankNo < 10; rankNo++){
						int treeID = ranked[rankNo];
						trees50[rankNo] = Classifier.makeCopy(RFTrees[treeID]); 
						trees20[rankNo] = Classifier.makeCopy(RFTrees[treeID]);
						trees10[rankNo] = Classifier.makeCopy(RFTrees[treeID]);
					}
					for (rankNo = 10; rankNo < 20; rankNo++){
						int treeID = ranked[rankNo];
						trees50[rankNo] = Classifier.makeCopy(RFTrees[treeID]); 
						trees20[rankNo] = Classifier.makeCopy(RFTrees[treeID]);
					}
					for (rankNo = 20; rankNo < 50; rankNo++){
						int treeID = ranked[rankNo];
						trees50[rankNo] = Classifier.makeCopy(RFTrees[treeID]); 
					}
					voters10.setClassifiers(trees10);
					voters20.setClassifiers(trees20);
					voters50.setClassifiers(trees50);
					
//					System.out.printf("Voters 10: %s\n",voters10.toString());
//					System.exit(0);
//					System.out.printf("passou\n");
					
					voters10.setClassifiers(RFTrees);
					eval.evaluateModel(rf, testInstances);
					for (int instID = 0; instID < testInstances.numInstances(); instID++){
						Instance inst = testInstances.instance(instID);
						double[] probs = rf.distributionForInstance(inst);
						if (probs[0] == 0.5){
							dlRF++;
							System.out.printf("RF ");
						}
						//if ((probs[0] >= 0.4) && (probs[0] <= 0.6)) deadlocksRF0406++;
						probs = voters10.distributionForInstance(inst);
						if (probs[0] == 0.5){
							dlVT10++;
							System.out.printf("10 ");
						}
						probs = voters20.distributionForInstance(inst);
						if (probs[0] == 0.5){
							dlVT20++;
							System.out.printf("20 ");
						}
						probs = voters50.distributionForInstance(inst);
						if (probs[0] == 0.5){
							dlVT50++;
							System.out.printf("50 ");
						}
					}
				}
				
				sumDeadLocksRF +=  dlRF;
				sumDeadLocksVT10 += dlVT10;
				sumDeadLocksVT20 += dlVT20;
				sumDeadLocksVT50 += dlVT50;
			
				//history0406[randSeed] = deadlocksRF0406;
//				System.out.printf("\n[%d] RF: Dead locks: %d out of %d (%.3f%%)\n",
//						randSeed, dlRF,allInstances.numInstances(),(dlRF*100.0)/(double)allInstances.numInstances());
//				System.out.printf("[%d] VT10: Dead locks: %d out of %d (%.3f%%)\n",
//						randSeed,dlVT10,allInstances.numInstances(),(dlVT10*100.0)/(double)allInstances.numInstances());
//				System.out.printf("[%d] VT20: Dead locks: %d out of %d (%.3f%%)\n",
//						randSeed,dlVT20,allInstances.numInstances(),(dlVT20*100.0)/(double)allInstances.numInstances());
//				System.out.printf("[%d] VT50: Dead locks: %d out of %d (%.3f%%)\n",
//						randSeed,dlVT50,allInstances.numInstances(),(dlVT50*100.0)/(double)allInstances.numInstances());
//				deadlocksRF[randSeed] = dlRF;
//				deadlocksVT10[randSeed] = dlVT10;
//				deadlocksVT20[randSeed] = dlVT20;
//				deadlocksVT50[randSeed] = dlVT50;
				System.out.printf("\n%d\t%d\t%d\t%d\t%d\n",randSeed,dlRF,dlVT10,dlVT20,dlVT50);
				pw.printf("%d\t%d\t%d\t%d\t%d\n",randSeed,dlRF,dlVT10,dlVT20,dlVT50);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		System.out.printf("Total\t%d\t%d\t%d\t%d\n",sumDeadLocksRF,sumDeadLocksVT10,sumDeadLocksVT20,sumDeadLocksVT50);
		pw.printf("Total\t%d\t%d\t%d\t%d\n",sumDeadLocksRF,sumDeadLocksVT10,sumDeadLocksVT20,sumDeadLocksVT50);
		//System.out.printf("Average\t%.2f\t%.2f\t%.2f\t%.2f\n",sumDeadLocksRF/30.0,sumDeadLocksVT10/30.0,sumDeadLocksVT20/30.0,sumDeadLocksVT50/30.0);
		pw.printf("Average\t%.2f\t%.2f\t%.2f\t%.2f\n",sumDeadLocksRF/30.0,sumDeadLocksVT10/30.0,sumDeadLocksVT20/30.0,sumDeadLocksVT50/30.0);
		pw.close();
//		System.out.printf("\nDataset: %s\n" +
//				"RF: Total dead locks: %d.\n" +
//				"RF: Average per run: %.2f\n",arffFileName,sumDeadLocksRF,sumDeadLocksRF/30.0);
//		System.out.printf("\nDataset: %s\n" +
//				"VT10: Total dead locks: %d.\n" +
//				"VT10: Average per run: %.2f\n",arffFileName,sumDeadLocksVT10,sumDeadLocksVT10/30.0);
//		System.out.printf("\nDataset: %s\n" +
//				"VT20: Total dead locks: %d.\n" +
//				"VT20: Average per run: %.2f\n",arffFileName,sumDeadLocksVT20,sumDeadLocksVT20/30.0);
//		System.out.printf("\nDataset: %s\n" +
//				"VT50: Total dead locks: %d.\n" +
//				"VT50: Average per run: %.2f\n",arffFileName,sumDeadLocksVT50,sumDeadLocksVT50/30.0);
//		System.out.printf("Lower bound probability: %.2f\n" +
//				"Upper bound probability: %.2f\n",0.5,0.5);
//		System.out.printf("-------------------------------------------------------------\n");
//		int sumDeadlocks0406 = 0;
//		for (int i=0; i<30; i++){
//			int div0406 = history0406[i];
//			sumDeadlocks0406 += div0406;
//			System.out.printf("Dead locks: %d out of %d (%.3f%%)\n",
//					div0406,allInstances.numInstances(),(div0406*100.0)/(double)allInstances.numInstances());
//		}
//		System.out.printf("\nDataset: %s\n" +
//				"Total dead locks: %d.\n" +
//				"Average per run: %.2f\n",arffFileName,sumDeadlocks0406,sumDeadlocks0406/30.0);
//		System.out.printf("Lower bound probability: %.2f\n" +
//				"Upper bound probability: %.2f\n",0.4,0.6);
//		
	}

}
